package com.ishikawa.er1.search_elevator_r0;import android.content.Intent;import android.content.res.Resources;import android.graphics.BitmapFactory;import android.location.Location;import android.location.LocationManager;import android.os.Bundle;import android.os.Handler;import android.os.Message;import android.support.v7.app.ActionBarActivity;import android.util.Log;import android.view.Gravity;import android.view.Menu;import android.view.MenuItem;import android.view.View;import android.widget.AdapterView;import android.widget.ListView;import android.widget.Toast;import com.ishikawa.er1.lib.CustomAdapter;import com.ishikawa.er1.object.CustomData;import org.json.JSONArray;import org.json.JSONException;import org.json.JSONObject;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.xml.sax.SAXException;import java.io.BufferedReader;import java.io.ByteArrayInputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.io.UnsupportedEncodingException;import java.net.HttpURLConnection;import java.net.URL;import java.util.ArrayList;import java.util.HashMap;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;import javax.xml.parsers.ParserConfigurationException;import static android.util.Log.v;public class NearStationActivity extends ActionBarActivity {    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_my_list_view);            getListDataApi();    }    /**     @auther takeno     */    private void getListDataApi () {        int netStatus = Util.isConnectedNetwork(this);        if (netStatus > 0) {            double[] gspinfo = getLocation();            if (gspinfo[0] == 0.0 && gspinfo[1] == 0.0 ) {                Toast toast = Toast.makeText(getApplicationContext(), "couldn't get location data",Toast.LENGTH_LONG);                toast.setGravity(Gravity.CENTER_VERTICAL | Gravity.LEFT, 0, 0);                toast.show();            } else {                double lat = gspinfo[0];                double lon = gspinfo[1];                String api_url = "http://map.simpleapi.net/stationapi?y="+lat+"&x="+lon;                Log.d("hello_test", api_url + "");                Thread mythread = new Thread(new MythreadGetListData(api_url));                mythread.start();            }        }    }    /**     * 位置情報を元に最寄駅一覧を取得する     * @auther takeno     */    private class MythreadGetListData implements Runnable {        private String responce_xml;        private String url = "";        public String[] output_data = new String[100];        //MyThread用-----------------------------------        protected Handler mHandlerLatLng = new Handler() {            @Override            public void handleMessage(Message msg) {//                v("api_responce", "::::" + (String) msg.obj + ":");            }        };        public MythreadGetListData(String url) {            // TODO 自動生成されたコンストラクター・スタブ            this.url = url;            // this.url = "http://map.simpleapi.net/stationapi?y=35.658889&x=139.703333";        }        public void run() {            HttpRequest hr = new HttpRequest();            responce_xml = hr.doGet(this.url);            // ハンドラにメッセージを通知            mHandlerLatLng.sendEmptyMessage(0);            mHandlerLatLng.post(new Runnable() {                public void run() {                    InputStream bais = null;                    try {                        // データの作成                        ArrayList<HashMap> staionArray = new ArrayList<HashMap>();                        bais = new ByteArrayInputStream(responce_xml.getBytes("utf-8"));                        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();                        DocumentBuilder builder = factory.newDocumentBuilder();                        Node root = builder.parse(bais);                        Node child = root.getFirstChild();                        NodeList gchildren = child.getChildNodes();                        for (int i = 0; i < gchildren.getLength(); i++) {                            //-------------------------                            //抜き出した要素の中から順番に、子要素を抜く出す                            NodeList list = gchildren.item(i).getChildNodes();                            HashMap stMap = getStationName(list);                            if (stMap.get("name").equals("") == false) {                                staionArray.add(stMap);                            }                        }                        showCustomListView(staionArray);                    } catch (IOException e) {                        e.printStackTrace();                    } catch (ParserConfigurationException e) {                        e.printStackTrace();                    } catch (SAXException e) {                        e.printStackTrace();                    }                }            });        }//        public void setOutput_data(String[] output_data) {//            this.output_data = output_data;//        }    }    /**     *  現在地の位置情報を取得する     * @return     * @auther takeno     */    public double[] getLocation() {        double[] locationInfo = new double[2];        LocationManager locationManager;        Location location = null;        try {            locationManager = (LocationManager)getSystemService(LOCATION_SERVICE);            // getting GPS status            boolean isGPSEnabled = locationManager                    .isProviderEnabled(LocationManager.GPS_PROVIDER);            // getting network status            boolean isNetworkEnabled = locationManager                    .isProviderEnabled(LocationManager.NETWORK_PROVIDER);            if (!isGPSEnabled && !isNetworkEnabled) {                // no network provider is enabled            } else {                if (isNetworkEnabled) {                    if (locationManager != null) {                        location = locationManager.getLastKnownLocation(LocationManager.NETWORK_PROVIDER);                        if (location != null) {                            double lat = location.getLatitude();                            double lon = location.getLongitude();                            locationInfo[0] = lat;                            locationInfo[1] = lon;                        }                    }                } else if (isGPSEnabled) {                    // if GPS Enabled get lat/long using GPS Services                    if (location == null) {                        if (locationManager != null) {                            location = locationManager                                    .getLastKnownLocation(LocationManager.GPS_PROVIDER);                            if (location != null) {                                double lat = location.getLatitude();                                double lon = location.getLongitude();                                locationInfo[0] = lat;                                locationInfo[1] = lon;                            }                        }                    }                }            }        } catch (Exception e) {            e.printStackTrace();        }        return locationInfo;    }    private HashMap<String,String> getStationName(NodeList list) {        HashMap<String,String> stMap = new HashMap<String,String>();        stMap.put("name","");        stMap.put("line","");        for (int j = 0;j < list.getLength(); j++)        {            //抜き出した子要素の中から順番に取りだし、空白であれば登録しない            String text = list.item(j).getNodeName();            if (text.equals("#text") == false)            {                String value = list.item(j).getTextContent().trim();                if (text.equals("name"))                {                    value = value.replaceAll("駅", "");                    stMap.put("name",value);                }                if (text.equals("line"))                {                    stMap.put("line",value);//                    Log.v("hello_line", "路線：" + value + ":");//                    //                            output_data [r]= "路線：" + value+"/";                }////                if (text.equals("distanceM"))//                {//                    Log.v("hello_distanceM", "距離：" + value + ":");//                    //                                      output_data += "距離：" + value+"/";//                }//                if (text.equals("traveltime"))//                {//                    Log.v("hello_traveltime", "時間：" + value + ":");//                    //                                    output_data += "時間：" + value+"\n\n\n";//                }            }        }//        showCustomListView(nameArray);        return stMap;    }    private void showCustomListView (ArrayList<HashMap> resultsArg) {        // データの作成        ArrayList<CustomData> objects = new ArrayList<CustomData>();        int c = resultsArg.size();        for (int i = 0; i < c; i++) {            String name = (String) resultsArg.get(i).get("name");            String line = (String) resultsArg.get(i).get("line");            CustomData item1 = new CustomData();            item1.setNameString(name+"");            item1.setLineString(line+"");            objects.add(item1);        }        CustomAdapter customAdapater = new CustomAdapter(this);        customAdapater.setMyList(objects);        ListView listView = (ListView)findViewById(R.id.mylist);        listView.setAdapter(customAdapater);        // リストビューのアイテムがクリックされた時に呼び出されるコールバックリスナーを登録します        listView.setOnItemClickListener(new AdapterView.OnItemClickListener() {            @Override            public void onItemClick(AdapterView<?> parent, View view,                                    int position, long id) {                ListView listView = (ListView) parent;                // クリックされたアイテムを取得します                CustomData customItem = (CustomData)listView.getItemAtPosition(position);                Intent intent = new Intent(getApplicationContext(), ResultActivity.class);                intent.putExtra("searchSta", customItem.getNameData());                startActivity(intent);            }        });    }    @Override    public boolean onOptionsItemSelected(MenuItem item) {        // Handle action bar item clicks here. The action bar will        // automatically handle clicks on the Home/Up button, so long        // as you specify a parent activity in AndroidManifest.xml.        int id = item.getItemId();        //noinspection SimplifiableIfStatement        if (id == R.id.action_settings) {            return true;        }        return super.onOptionsItemSelected(item);    }}